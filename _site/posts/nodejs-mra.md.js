webpackJsonp([1,4],{267:function(n,s){n.exports={content:["article",["p",["a",{title:null,href:"https://nodejs.org/api/modules.html#modules_all_together"},"node.js module resolution algorithm"]],["hr"],["p","To get the exact filename that will be loaded when require() is called, use the require.resolve() function."],["p","Putting together all of the above, here is the high-level algorithm in pseudocode of what require.resolve() does:"],["pre",{lang:null,highlighted:'<span class="token function">require</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> from module at path Y\n<span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X is a core module<span class="token punctuation">,</span>\n   a<span class="token punctuation">.</span> return the core module\n   b<span class="token punctuation">.</span> STOP\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X begins <span class="token keyword">with</span> <span class="token string">\'/\'</span>\n   a<span class="token punctuation">.</span> set Y <span class="token keyword">to</span> be the filesystem root\n<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X begins <span class="token keyword">with</span> <span class="token string">\'./\'</span> <span class="token operator">or</span> <span class="token string">\'/\'</span> <span class="token operator">or</span> <span class="token string">\'../\'</span>\n   a<span class="token punctuation">.</span> <span class="token function">LOAD_AS_FILE</span><span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> <span class="token function">LOAD_AS_DIRECTORY</span><span class="token punctuation">(</span>Y <span class="token operator">+</span> X<span class="token punctuation">)</span>\n<span class="token number">4</span><span class="token punctuation">.</span> <span class="token function">LOAD_NODE_MODULES</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token number">5</span><span class="token punctuation">.</span> THROW <span class="token string">"not found"</span>\n\n<span class="token function">LOAD_AS_FILE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X is a file<span class="token punctuation">,</span> load X as JavaScript text<span class="token punctuation">.</span>  STOP\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token punctuation">.</span>js is a file<span class="token punctuation">,</span> load X<span class="token punctuation">.</span>js as JavaScript text<span class="token punctuation">.</span>  STOP\n<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token punctuation">.</span>json is a file<span class="token punctuation">,</span> parse X<span class="token punctuation">.</span>json <span class="token keyword">to</span> a JavaScript Object<span class="token punctuation">.</span>  STOP\n<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token punctuation">.</span>node is a file<span class="token punctuation">,</span> load X<span class="token punctuation">.</span>node as binary addon<span class="token punctuation">.</span>  STOP\n\n<span class="token function">LOAD_INDEX</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token operator">/</span>index<span class="token punctuation">.</span>js is a file<span class="token punctuation">,</span> load X<span class="token operator">/</span>index<span class="token punctuation">.</span>js as JavaScript text<span class="token punctuation">.</span>  STOP\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token operator">/</span>index<span class="token punctuation">.</span>json is a file<span class="token punctuation">,</span> parse X<span class="token operator">/</span>index<span class="token punctuation">.</span>json <span class="token keyword">to</span> a JavaScript object<span class="token punctuation">.</span> STOP\n<span class="token number">3</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token operator">/</span>index<span class="token punctuation">.</span>node is a file<span class="token punctuation">,</span> load X<span class="token operator">/</span>index<span class="token punctuation">.</span>node as binary addon<span class="token punctuation">.</span>  STOP\n\n<span class="token function">LOAD_AS_DIRECTORY</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> <span class="token keyword">If</span> X<span class="token operator">/</span>package<span class="token punctuation">.</span>json is a file<span class="token punctuation">,</span>\n   a<span class="token punctuation">.</span> Parse X<span class="token operator">/</span>package<span class="token punctuation">.</span>json<span class="token punctuation">,</span> <span class="token operator">and</span> look <span class="token keyword">for</span> <span class="token string">"main"</span> field<span class="token punctuation">.</span>\n   b<span class="token punctuation">.</span> let M <span class="token operator">=</span> X <span class="token operator">+</span> <span class="token punctuation">(</span>json main field<span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> <span class="token function">LOAD_AS_FILE</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n   d<span class="token punctuation">.</span> <span class="token function">LOAD_INDEX</span><span class="token punctuation">(</span>M<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token function">LOAD_INDEX</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>\n\n<span class="token function">LOAD_NODE_MODULES</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let DIRS<span class="token operator">=</span><span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> <span class="token keyword">for</span> each DIR <span class="token keyword">in</span> DIRS<span class="token punctuation">:</span>\n   a<span class="token punctuation">.</span> <span class="token function">LOAD_AS_FILE</span><span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n   b<span class="token punctuation">.</span> <span class="token function">LOAD_AS_DIRECTORY</span><span class="token punctuation">(</span>DIR<span class="token operator">/</span>X<span class="token punctuation">)</span>\n\n<span class="token function">NODE_MODULES_PATHS</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">1</span><span class="token punctuation">.</span> let PARTS <span class="token operator">=</span> path <span class="token function">split</span><span class="token punctuation">(</span>START<span class="token punctuation">)</span>\n<span class="token number">2</span><span class="token punctuation">.</span> let I <span class="token operator">=</span> count of PARTS <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">3</span><span class="token punctuation">.</span> let DIRS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token number">4</span><span class="token punctuation">.</span> <span class="token keyword">while</span> I <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n   a<span class="token punctuation">.</span> <span class="token keyword">if</span> PARTS<span class="token punctuation">[</span>I<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"node_modules"</span> CONTINUE\n   b<span class="token punctuation">.</span> DIR <span class="token operator">=</span> path <span class="token function">join</span><span class="token punctuation">(</span>PARTS<span class="token punctuation">[</span><span class="token number">0</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> I<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"node_modules"</span><span class="token punctuation">)</span>\n   c<span class="token punctuation">.</span> DIRS <span class="token operator">=</span> DIRS <span class="token operator">+</span> DIR\n   d<span class="token punctuation">.</span> let I <span class="token operator">=</span> I <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token number">5</span><span class="token punctuation">.</span> return DIRS'},["code","require(X) from module at path Y\n1. If X is a core module,\n   a. return the core module\n   b. STOP\n2. If X begins with '/'\n   a. set Y to be the filesystem root\n3. If X begins with './' or '/' or '../'\n   a. LOAD_AS_FILE(Y + X)\n   b. LOAD_AS_DIRECTORY(Y + X)\n4. LOAD_NODE_MODULES(X, dirname(Y))\n5. THROW \"not found\"\n\nLOAD_AS_FILE(X)\n1. If X is a file, load X as JavaScript text.  STOP\n2. If X.js is a file, load X.js as JavaScript text.  STOP\n3. If X.json is a file, parse X.json to a JavaScript Object.  STOP\n4. If X.node is a file, load X.node as binary addon.  STOP\n\nLOAD_INDEX(X)\n1. If X/index.js is a file, load X/index.js as JavaScript text.  STOP\n2. If X/index.json is a file, parse X/index.json to a JavaScript object. STOP\n3. If X/index.node is a file, load X/index.node as binary addon.  STOP\n\nLOAD_AS_DIRECTORY(X)\n1. If X/package.json is a file,\n   a. Parse X/package.json, and look for \"main\" field.\n   b. let M = X + (json main field)\n   c. LOAD_AS_FILE(M)\n   d. LOAD_INDEX(M)\n2. LOAD_INDEX(X)\n\nLOAD_NODE_MODULES(X, START)\n1. let DIRS=NODE_MODULES_PATHS(START)\n2. for each DIR in DIRS:\n   a. LOAD_AS_FILE(DIR/X)\n   b. LOAD_AS_DIRECTORY(DIR/X)\n\nNODE_MODULES_PATHS(START)\n1. let PARTS = path split(START)\n2. let I = count of PARTS - 1\n3. let DIRS = []\n4. while I >= 0,\n   a. if PARTS[I] = \"node_modules\" CONTINUE\n   b. DIR = path join(PARTS[0 .. I] + \"node_modules\")\n   c. DIRS = DIRS + DIR\n   d. let I = I - 1\n5. return DIRS"]]],meta:{title:"node.js \u89e3\u6790\u7b97\u6cd5",publishDate:"2017-09-16T00:00:00.000Z",tags:["js","node.js","web"],filename:"posts/nodejs-mra.md"}}}});